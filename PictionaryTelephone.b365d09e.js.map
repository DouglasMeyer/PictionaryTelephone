{"version":3,"sources":["DrawingCanvas.js","index.js"],"names":["DrawingCanvas","canvas","document","createElement","attachShadow","mode","appendChild","style","height","width","context","latestPoint","currentAngle","getContext","drawing","rotatePoint","distance","angle","origin","Math","cos","sin","getNewAngle","destination","oldAngle","bearing","atan2","PI","getBearing","angleDiff","angleA","angleB","twoPi","diff","drawStroke","newAngle","beginPath","controlPoint","moveTo","strokeStyle","lineWidth","lineCap","lineJoin","shadowColor","shadowBlur","strokeWidth","quadraticCurveTo","lineTo","stroke","strokeBristle","continueStroke","newPoint","timeout","clearTimeout","setTimeout","_drawing","toDataURL","dispatchEvent","CustomEvent","startStroke","point","undefined","getTouchPoint","evt","currentTarget","rect","getBoundingClientRect","touch","targetTouches","scale","clientX","left","clientY","top","mouseMove","offsetX","offsetY","mouseDown","preventDefault","addEventListener","endStroke","removeEventListener","touchEnd","buttons","HTMLElement","value","clientHeight","customElements","define","idChars","Array","fill","map","_","i","toString","concat","String","fromCharCode","id","floor","length","random","join","pictionaryTelephone","Elm","Main","init","node","querySelector","flags","url","location","pathname","game","search","match","DEBUG","window","keepAliveTimeout","ws","WebSocket","keepAlive","readyState","OPEN","send","keep","data","console","log","JSON","stringify","error","bind","split","forEach","name","me","gameId","namespace","json","parse","rooms","ports","getGames","event","command","room","message","action","player","setPlayer","getStartGame","setThread","thread","_event","joinGame","subscribe","sendPlayer","sendStartGame","sendThread"],"mappings":"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","file":"PictionaryTelephone.b365d09e.js","sourceRoot":"..","sourcesContent":["class DrawingCanvas extends HTMLElement {\n  get drawing() {\n    return this._drawing;\n  }\n  set drawing(value) {\n    if (this._drawing === value) return;\n    this._drawing = value;\n  }\n  // disconnectedCallback() {\n  //   removeEventListener('resize');\n  // }\n  get scale() {\n    return this.canvas.height / this.canvas.clientHeight;\n  }\n  // scale()\n  constructor() {\n    super();\n    const canvas = document.createElement('canvas');\n    this.canvas = canvas;\n    const shadowRoot = this.attachShadow({mode: 'open'})\n      .appendChild(canvas);\n    canvas.style.height = '100%';\n    canvas.style.width = '100%';\n    canvas.width = 400;\n    canvas.height = 800;\n    // let scale = 1;\n    // setInterval(() => {\n    //   console.log('scale');\n    //   scale = canvas.height / canvas.clientHeight;\n    // }, 1000);\n    // addEventListener('resize' scale);\n\n    // stolen from: https://codesandbox.io/s/paint-tool-final-g362x?from-embed\n    const context = canvas.getContext('2d');\n    const strokeWidth = 3;\n\n    // Drawing state\n    let latestPoint;\n    let drawing = false;\n    let currentAngle;\n\n    // Geometry\n\n    const rotatePoint = (distance, angle, origin) => [\n      origin[0] + distance * Math.cos(angle),\n      origin[1] + distance * Math.sin(angle)\n    ];\n\n    const getBearing = (origin, destination) =>\n      (Math.atan2(destination[1] - origin[1], destination[0] - origin[0]) -\n        Math.PI / 2) %\n      (Math.PI * 2);\n\n    const getNewAngle = (origin, destination, oldAngle) => {\n      const bearing = getBearing(origin, destination);\n      if (typeof oldAngle === \"undefined\") {\n        return bearing;\n      }\n      return oldAngle - angleDiff(oldAngle, bearing);\n    };\n\n    const angleDiff = (angleA, angleB) => {\n      const twoPi = Math.PI * 2;\n      const diff =\n        ((angleA - (angleB > 0 ? angleB : angleB + twoPi) + Math.PI) % twoPi) -\n        Math.PI;\n      return diff < -Math.PI ? diff + twoPi : diff;\n    };\n\n    // Drawing functions\n\n    const strokeBristle = (origin, destination, controlPoint) => {\n      context.beginPath();\n      context.moveTo(origin[0], origin[1]);\n      context.strokeStyle = \"black\";\n      context.lineWidth = strokeWidth;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.shadowColor = \"black\";\n      context.shadowBlur = strokeWidth / 2;\n      context.quadraticCurveTo(\n        controlPoint[0],\n        controlPoint[1],\n        destination[0],\n        destination[1]\n      );\n      context.lineTo(destination[0], destination[1]);\n      context.stroke();\n    };\n\n    const drawStroke = (origin, destination, oldAngle, newAngle) => {\n      context.beginPath();\n      const bristleOrigin = rotatePoint(\n        0 - strokeWidth / 2,\n        oldAngle,\n        origin\n      );\n\n      const bristleDestination = rotatePoint(\n        0 - strokeWidth / 2,\n        newAngle,\n        destination\n      );\n      const controlPoint = rotatePoint(\n        0 - strokeWidth / 2,\n        newAngle,\n        origin\n      );\n\n      strokeBristle(bristleOrigin, bristleDestination, controlPoint);\n    };\n    const continueStroke = newPoint => {\n      const newAngle = getNewAngle(latestPoint, newPoint, currentAngle);\n      drawStroke(latestPoint, newPoint, currentAngle, newAngle);\n      currentAngle = newAngle % (Math.PI * 2);\n      latestPoint = newPoint;\n\n      if (this.timeout) clearTimeout(this.timeout);\n      this.timeout = setTimeout(() => {\n        this.timeout = null;\n        this._drawing = canvas.toDataURL();\n        this.dispatchEvent(new CustomEvent('drawingChanged'));\n      }, 300);\n    };\n    // Event helpers\n\n    const startStroke = point => {\n      currentAngle = undefined;\n      drawing = true;\n      latestPoint = point;\n    };\n\n    const getTouchPoint = evt => {\n      if (!evt.currentTarget) {\n        return [0, 0];\n      }\n      const rect = evt.currentTarget.getBoundingClientRect();\n      const touch = evt.targetTouches[0];\n      const scale = this.scale;\n      return [touch.clientX*scale - rect.left*scale, touch.clientY*scale - rect.top*scale];\n    };\n\n    const BUTTON = 0b01;\n    const mouseButtonIsDown = buttons => (BUTTON & buttons) === BUTTON;\n\n    // Event handlers\n\n    const mouseMove = evt => {\n      if (!drawing) {\n        return;\n      }\n      const scale = this.scale;\n      continueStroke([evt.offsetX * scale, evt.offsetY * scale]);\n    };\n\n    const mouseDown = evt => {\n      if (drawing) {\n        return;\n      }\n      evt.preventDefault();\n      canvas.addEventListener(\"mousemove\", mouseMove, false);\n      const scale = this.scale;\n      startStroke([evt.offsetX * scale, evt.offsetY * scale]);\n    };\n\n    const mouseEnter = evt => {\n      if (!mouseButtonIsDown(evt.buttons) || drawing) {\n        return;\n      }\n      mouseDown(evt);\n    };\n\n    const endStroke = evt => {\n      if (!drawing) {\n        return;\n      }\n      drawing = false;\n      evt.currentTarget.removeEventListener(\"mousemove\", mouseMove, false);\n    };\n\n    const touchStart = evt => {\n      if (drawing) {\n        return;\n      }\n      evt.preventDefault();\n      startStroke(getTouchPoint(evt));\n    };\n\n    const touchMove = evt => {\n      if (!drawing) {\n        return;\n      }\n      continueStroke(getTouchPoint(evt));\n    };\n\n    const touchEnd = evt => {\n      drawing = false;\n    };\n\n    this.addEventListener(\"touchstart\", touchStart, false);\n    this.addEventListener(\"touchend\", touchEnd, false);\n    this.addEventListener(\"touchcancel\", touchEnd, false);\n    this.addEventListener(\"touchmove\", touchMove, false);\n\n    this.addEventListener(\"mousedown\", mouseDown, false);\n    this.addEventListener(\"mouseup\", endStroke, false);\n    this.addEventListener(\"mouseout\", endStroke, false);\n    this.addEventListener(\"mouseenter\", mouseEnter, false);\n  }\n}\ncustomElements.define('drawing-canvas', DrawingCanvas);\n","import './DrawingCanvas';\nimport { Elm } from './Main.elm';\n\nimport './index.css';\n\nconst idChars = new Array(10).fill().map((_,i)=>i.toString()).concat(\n  new Array(26).fill().map((_,i)=>String.fromCharCode(i+97))\n);\nconst id = new Array(7).fill().map(()=>\n  idChars[Math.floor(idChars.length*Math.random())]\n).join('')\n\nconst pictionaryTelephone = Elm.Main.init({\n  node: document.querySelector('main'),\n  flags: {\n    url: location.origin+location.pathname,\n    game: (location.search.match(/game=([^&]+)/) || [])[1],\n    id\n  }\n});\n\nconst DEBUG = true;\nif (DEBUG) window.pictionaryTelephone = pictionaryTelephone;\n\nconst ws = new WebSocket('wss://web-peers.herokuapp.com');\nif (DEBUG) {\n  window.ws = ws;\n  ws.addEventListener('error', console.error.bind(console, 'ws error'));\n  'open message close'.split(' ').forEach(name => {\n    ws.addEventListener(name, console.log.bind(console, `ws ${name}`));\n  });\n}\n\n\nlet keepAliveTimeout;\nfunction keepAlive() {\n  if (keepAliveTimeout) clearTimeout(keepAliveTimeout);\n  keepAliveTimeout = setTimeout(() => {\n    keepAliveTimeout = null;\n    if (ws.readyState === WebSocket.OPEN) send({ keep: \"alive\" })\n  }, 35*1000);\n}\nkeepAlive();\nfunction send(data) {\n  if (DEBUG) console.log('send', data);\n  ws.send(JSON.stringify(data));\n  keepAlive();\n}\n\nconst namespace = \"PictionaryTelephone\"\nlet me;\nlet gameId;\nws.addEventListener('message', ({ data: json }) => {\n  const data = JSON.parse(json);\n\n  if (data.rooms) {\n    pictionaryTelephone.ports.getGames.send(data.rooms);\n  } else if (data.event === 'joinedRoom') {\n    send({ command: 'send', namespace, room: gameId, id, message: {\n      action: 'sendPlayer', player: me\n    } });\n  } else if (data.event === 'message' && data.message.action === 'sendPlayer') {\n    pictionaryTelephone.ports.setPlayer.send(data.message.player);\n  } else if (data.event === 'message' && data.message.action === 'startGame') {\n    pictionaryTelephone.ports.getStartGame.send(null);\n  } else if (data.event === 'message' && data.message.action === 'sendThread') {\n    pictionaryTelephone.ports.setThread.send(data.message.thread);\n  } else {\n    console.error('unhandled message', data);\n  }\n});\n\nws.addEventListener('open', (_event) => {\n  send({ command: 'getRooms', namespace });\n});\n\npictionaryTelephone.ports.joinGame.subscribe(game => {\n  gameId = game;\n  send({ command: 'joinRoom', namespace, room: gameId, id });\n});\n\npictionaryTelephone.ports.sendPlayer.subscribe(player => {\n  me = player;\n  send({ command: 'send', namespace, room: gameId, id, message: {\n    action: 'sendPlayer', player\n  } });\n});\npictionaryTelephone.ports.sendStartGame.subscribe(() => {\n  send({ command: 'send', namespace, room: gameId, id, message: {\n    action: 'startGame'\n  } });\n});\npictionaryTelephone.ports.sendThread.subscribe(thread => {\n  send({ command: 'send', namespace, room: gameId, id, message: {\n    action: 'sendThread', thread\n  } });\n});\n"]}